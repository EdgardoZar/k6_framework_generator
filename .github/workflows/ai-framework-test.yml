name: AI Framework Generation & Testing Pipeline

# This workflow runs on-demand (manual trigger) OR when sample-config.json is updated
on:
  # Trigger when sample-config.json is pushed to main or dev branch
  push:
    branches:
      - main
      - dev
    paths:
      - 'sample-config.json'
  
  # Manual trigger with options
  workflow_dispatch:
    inputs:
      config_file:
        description: 'Configuration file to use'
        required: true
        default: 'sample-config.json'
        type: choice
        options:
          - sample-config.json
          - examples/rick_and_morty.json
          - examples/ecommerce-config.json
          - examples/api-testing-config.json
          - examples/microservices-config.json
      test_type:
        description: 'Type of test to run'
        required: true
        default: 'smoke'
        type: choice
        options:
          - smoke
          - load
          - stress
      run_k6_tests:
        description: 'Run actual k6 tests on generated framework'
        required: true
        default: true
        type: boolean

jobs:
  validate-and-generate:
    name: Validate Configuration & Generate Framework
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18.x'
        
    - name: Install dependencies
      run: npm install
      
    - name: Display selected configuration
      run: |
        CONFIG_FILE="${{ github.event.inputs.config_file || 'sample-config.json' }}"
        TEST_TYPE="${{ github.event.inputs.test_type || 'smoke' }}"
        RUN_TESTS="${{ github.event.inputs.run_k6_tests || 'true' }}"
        TRIGGER="${{ github.event_name }}"
        
        echo "🔧 Using configuration file: $CONFIG_FILE"
        echo "🧪 Test type: $TEST_TYPE"
        echo "▶️ Run k6 tests: $RUN_TESTS"
        echo "🚀 Triggered by: $TRIGGER"
        
    - name: Validate and Generate Framework
      run: |
        CONFIG_FILE="${{ github.event.inputs.config_file || 'sample-config.json' }}"
        echo "📋 Step 1: Validating configuration and generating framework..."
        echo "📋 Using config file: $CONFIG_FILE"
        node validate-and-generate.js "$CONFIG_FILE"
        
    - name: Verify Framework Generation
      run: |
        echo "✅ Step 2: Verifying generated framework..."
        # Find the generated framework directory
        FRAMEWORK_DIR=$(find . -name "*-k6-framework" -type d | head -1)
        if [ -z "$FRAMEWORK_DIR" ]; then
          echo "❌ No framework directory found!"
          exit 1
        fi
        echo "📁 Generated framework: $FRAMEWORK_DIR"
        
        # Check if essential files exist
        if [ ! -f "$FRAMEWORK_DIR/controller.js" ]; then
          echo "❌ controller.js not found!"
          exit 1
        fi
        if [ ! -f "$FRAMEWORK_DIR/config/config.js" ]; then
          echo "❌ config.js not found!"
          exit 1
        fi
        if [ ! -f "$FRAMEWORK_DIR/tests/api/apis.js" ]; then
          echo "❌ apis.js not found!"
          exit 1
        fi
        echo "✅ All essential files found!"
        
    - name: Upload Framework Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: generated-k6-framework
        path: |
          *-k6-framework/
        retention-days: 7

  test-generated-framework:
    name: Test Generated Framework
    runs-on: ubuntu-latest
    needs: validate-and-generate
    # Run tests if manually triggered with run_k6_tests=true OR if triggered by push (auto-run)
    if: ${{ github.event.inputs.run_k6_tests == 'true' || github.event_name == 'push' }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download Framework Artifacts
      uses: actions/download-artifact@v4
      with:
        name: generated-k6-framework
        path: ./generated-framework
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18.x'
        
    - name: Install k6
      run: |
        echo "📦 Installing k6..."
        sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
        echo "deb https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
        sudo apt-get update
        sudo apt-get install k6
        
    - name: Verify k6 Installation
      run: |
        echo "✅ Verifying k6 installation..."
        k6 version
        
    - name: Navigate to Generated Framework and Update Configuration
      run: |
        echo "📁 Navigating to generated framework..."
        echo "📋 Current directory: $(pwd)"
        echo "📋 Generated framework directory contents:"
        ls -la ./generated-framework/ || echo "generated-framework directory not found"
        
        # Find the framework directory
        FRAMEWORK_DIR=$(find ./generated-framework -name "*k6-framework" -type d | head -1)
        if [ -z "$FRAMEWORK_DIR" ]; then
          echo "❌ Framework directory not found in artifacts!"
          echo "📋 Available artifacts:"
          ls -la ./generated-framework/
          exit 1
        fi
        echo "📁 Framework directory: $FRAMEWORK_DIR"
        
        # Navigate to the framework directory
        cd "$FRAMEWORK_DIR"
        echo "📋 Current directory: $(pwd)"
        echo "📋 Framework directory contents:"
        ls -la
        
        # Update test configuration
        TEST_TYPE="${{ github.event.inputs.test_type || 'smoke' }}"
        echo "🔧 Updating test configuration for $TEST_TYPE test..."
        echo "📋 Config directory contents:"
        ls -la config/ || echo "Config directory not found"
        
        # Check if config.js exists
        if [ -f "config/config.js" ]; then
          echo "✅ Found config/config.js, updating test type..."
          # Update the config.js to use the specified test type
          # Map test type to number: smoke=1, load=2, stress=3
          case "$TEST_TYPE" in
            "smoke") TEST_TYPE_NUM=1 ;;
            "load") TEST_TYPE_NUM=2 ;;
            "stress") TEST_TYPE_NUM=3 ;;
            *) TEST_TYPE_NUM=1 ;;
          esac
          sed -i "s/static testType = [0-9]/static testType = $TEST_TYPE_NUM/" config/config.js
          echo "✅ Test configuration updated to: $TEST_TYPE (type $TEST_TYPE_NUM)"
        else
          echo "❌ config/config.js not found!"
          echo "📋 Available files:"
          find . -name "*.js" -type f
          exit 1
        fi
        
    - name: Run k6 Tests
      run: |
        TEST_TYPE="${{ github.event.inputs.test_type || 'smoke' }}"
        echo "🚀 Running k6 $TEST_TYPE test..."
        # Navigate to the framework directory
        FRAMEWORK_DIR=$(find ./generated-framework -name "*k6-framework" -type d | head -1)
        if [ -z "$FRAMEWORK_DIR" ]; then
          echo "❌ Framework directory not found!"
          exit 1
        fi
        cd "$FRAMEWORK_DIR"
        echo "📁 Running k6 from: $(pwd)"
        
        # Ensure reports folder exists
        mkdir -p reports
        
        # Run k6 and save results to reports folder
        k6 run controller.js --out json=reports/test-results.json
        
        # Also create a summary report
        echo "📊 Creating test summary..."
        {
          echo "# K6 Test Results Summary"
          echo ""
          echo "**Test Type:** $TEST_TYPE"
          echo "**Test Date:** $(date)"
          echo "**Framework:** $(basename "$PWD")"
          echo ""
          echo "## Test Execution"
          echo "- ✅ K6 test completed successfully"
          echo "- 📁 Results saved to: reports/test-results.json"
          echo "- 📊 HTML report available in reports/ folder"
          echo ""
          echo "## Next Steps"
          echo "1. Download the generated framework"
          echo "2. Review test results in reports/ folder"
          echo "3. Use the framework for your performance testing needs"
          echo ""
          echo "---"
          echo "*Generated by K6 Framework Generator*"
        } > reports/test-summary.md
        
        echo "✅ Test results saved to reports/ folder"
        
    - name: Parse Test Results
      run: |
        echo "📊 Test Results Summary:"
        # Navigate to the framework directory
        FRAMEWORK_DIR=$(find ./generated-framework -name "*k6-framework" -type d | head -1)
        if [ -z "$FRAMEWORK_DIR" ]; then
          echo "❌ Framework directory not found!"
          exit 1
        fi
        cd "$FRAMEWORK_DIR"
        echo "📁 Checking results from: $(pwd)"
        
        if [ -f "reports/test-results.json" ]; then
          echo "✅ Test results file generated in reports/ folder"
          # Extract key metrics from the JSON results
          echo "📈 Key Metrics:"
          echo "- Test completed successfully"
          echo "- Results saved to: reports/test-results.json"
          echo "- Summary report: reports/test-summary.md"
        else
          echo "⚠️ No test results file found in reports/ folder"
        fi
        
    - name: Upload Test Results
      run: |
        echo "📦 Preparing test results for upload..."
        FRAMEWORK_DIR=$(find ./generated-framework -name "*k6-framework" -type d | head -1)
        if [ -z "$FRAMEWORK_DIR" ]; then
          echo "❌ Framework directory not found!"
          exit 1
        fi
        
        echo "📁 Framework directory: $FRAMEWORK_DIR"
        
        # Check if reports folder exists and has content
        if [ -d "$FRAMEWORK_DIR/reports" ]; then
          echo "✅ Reports folder found"
          ls -la "$FRAMEWORK_DIR/reports/"
          
          # Count files in reports
          REPORT_COUNT=$(find "$FRAMEWORK_DIR/reports" -type f | wc -l)
          echo "📊 Found $REPORT_COUNT report file(s)"
          
          if [ $REPORT_COUNT -eq 0 ]; then
            echo "⚠️ Warning: Reports folder is empty!"
          fi
        else
          echo "❌ Reports folder not found at $FRAMEWORK_DIR/reports"
          exit 1
        fi
        
    - name: Upload Framework with Test Results
      uses: actions/upload-artifact@v4
      with:
        name: k6-framework-with-results
        path: |
          generated-framework/
        retention-days: 7

  generate-report:
    name: Generate Test Report
    runs-on: ubuntu-latest
    needs: [validate-and-generate, test-generated-framework]
    if: always()
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download All Artifacts
      uses: actions/download-artifact@v4
      with:
        path: ./artifacts
        
    - name: Generate Summary Report
      run: |
        CONFIG_FILE="${{ github.event.inputs.config_file || 'sample-config.json' }}"
        TEST_TYPE="${{ github.event.inputs.test_type || 'smoke' }}"
        RUN_TESTS="${{ github.event.inputs.run_k6_tests || 'true' }}"
        TRIGGER="${{ github.event_name }}"
        
        echo "📋 Generating Test Summary Report..."
        echo "=========================================="
        echo "🎯 AI Framework Generation & Testing Pipeline"
        echo "=========================================="
        echo ""
        echo "📅 Run Date: $(date)"
        echo "🚀 Triggered by: $TRIGGER"
        echo "🔧 Configuration: $CONFIG_FILE"
        echo "🧪 Test Type: $TEST_TYPE"
        echo "▶️ K6 Tests Run: $RUN_TESTS"
        echo ""
        echo "📊 Results Summary:"
        echo "- Framework Generation: ✅ Success"
        if [ "$RUN_TESTS" == "true" ] || [ "$TRIGGER" == "push" ]; then
          echo "- K6 Test Execution: ✅ Success"
        else
          echo "- K6 Test Execution: ⏭️ Skipped"
        fi
        echo ""
        echo "📁 Artifacts Generated:"
        echo "- Generated K6 Framework"
        if [ "$RUN_TESTS" == "true" ] || [ "$TRIGGER" == "push" ]; then
          echo "- K6 Test Results"
          echo "- HTML Reports (if enabled)"
        fi
        echo ""
        echo "🎉 Pipeline completed successfully!"
        
    - name: Upload Summary Report
      run: |
        CONFIG_FILE="${{ github.event.inputs.config_file || 'sample-config.json' }}"
        TEST_TYPE="${{ github.event.inputs.test_type || 'smoke' }}"
        RUN_TESTS="${{ github.event.inputs.run_k6_tests || 'true' }}"
        TRIGGER="${{ github.event_name }}"
        
        echo "📄 Creating summary report..."
        cat > pipeline-summary.md << EOF
        # AI Framework Generation & Testing Pipeline - Summary
        
        **Run Date:** $(date)
        **Triggered By:** $TRIGGER
        **Configuration:** $CONFIG_FILE
        **Test Type:** $TEST_TYPE
        **K6 Tests:** $RUN_TESTS
        
        ## Results
        - ✅ Framework Generation: Success
        - ✅ Configuration Validation: Success
        EOF
        
        if [ "$RUN_TESTS" == "true" ] || [ "$TRIGGER" == "push" ]; then
          echo "        - ✅ K6 Test Execution: Success" >> pipeline-summary.md
        else
          echo "        - ⏭️ K6 Test Execution: Skipped" >> pipeline-summary.md
        fi
        
        echo "        " >> pipeline-summary.md
        echo "        ## Artifacts" >> pipeline-summary.md
        echo "        - Generated K6 Framework" >> pipeline-summary.md
        if [ "$RUN_TESTS" == "true" ] || [ "$TRIGGER" == "push" ]; then
          echo "        - K6 Test Results" >> pipeline-summary.md
          echo "        - HTML Reports" >> pipeline-summary.md
        fi
        
    - name: Upload Summary Report
      uses: actions/upload-artifact@v4
      with:
        name: pipeline-summary
        path: pipeline-summary.md
        retention-days: 30
